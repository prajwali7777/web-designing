#include <graphics.h>
#include <conio.h>
#include <math.h>

int main() {
    int gd = DETECT, gm;
    initgraph(&gd, &gm, "");

    setbkcolor(BROWN);

    int x = 320, y = 400;
    int enemyX, enemyY;
    int bx1, by1, bx2, by2, bx3, by3;
    int isFired = 0;
    char ch;

    int score = 0;
    int level = 1;

    int firePattern = 1; // Initial fire pattern

    while (1) {
        enemyX = rand() % 600 + 20;
        enemyY = 50;

        // Selection menu for fire pattern
        cleardevice();
        outtextxy(250, 180, "Select Fire Pattern:");
        outtextxy(250, 200, "1. Pattern 1 (Triangle Shooter)");
        outtextxy(250, 220, "2. Pattern 2 (Rectangle Shooter)");

        ch = getch();

        if (ch == '1')
            firePattern = 1;
        else if (ch == '2')
            firePattern = 2;

        cleardevice();

        while (1) {
            if (kbhit()) {
                ch = getch();
                if (ch == ' ')
                    isFired = 1;
            }

            if (isFired) {
                by1 -= 5;
                by2 -= 5;
                by3 -= 5;
                if (by1 < 0 || by2 < 0 || by3 < 0) {
                    isFired = 0;
                }
            } else {
                bx1 = x - 10;
                by1 = y;
                bx2 = x;
                by2 = y;
                bx3 = x + 10;
                by3 = y;
            }

            cleardevice();

            if (firePattern == 1) {
                // Draw triangle as shooter
                int shooterPoints[] = {x, y, x - 20, y + 30, x + 20, y + 30, x, y};
                setfillstyle(SOLID_FILL, YELLOW);
                fillpoly(4, shooterPoints);
            } else if (firePattern == 2) {
                // Draw rectangle as shooter
                rectangle(x - 20, y, x + 20, y + 30);
                setfillstyle(SOLID_FILL, YELLOW);
                floodfill(x, y + 15, WHITE);
            }

            rectangle(bx1 - 2, by1 - 10, bx1 + 2, by1);
            rectangle(bx2 - 2, by2 - 10, bx2 + 2, by2);
            rectangle(bx3 - 2, by3 - 10, bx3 + 2, by3);

            setfillstyle(SOLID_FILL, RED);
            circle(enemyX, enemyY, 20);

            delay(10);

            if (isFired) {
                if (sqrt(pow(bx1 - enemyX, 2) + pow(by1 - enemyY, 2)) <= 20) {
                    isFired = 0;
                    score++;
                    break;
                }
                if (sqrt(pow(bx2 - enemyX, 2) + pow(by2 - enemyY, 2)) <= 20) {
                    isFired = 0;
                    score++;
                    break;
                }
                if (sqrt(pow(bx3 - enemyX, 2) + pow(by3 - enemyY, 2)) <= 20) {
                    isFired = 0;
                    score++;
                    break;
                }
            }

            if (enemyY > 460) {
                cleardevice();
                outtextxy(250, 200, "Game Over");
                break;
            }

            if (ch == 'a' && x > 25)
                x -= 10;
            else if (ch == 'd' && x < 615)
                x += 10;

            enemyY += level;

            // Shoot fire based on the selected pattern
            if (isFired) {
                if (firePattern == 1) {
                    bx1 = x - 10;
                    bx2 = x;
                    bx3 = x + 10;
                    by1 -= 2;
                    by2 -= 2;
                    by3 -= 2;
                } else if (firePattern == 2) {
                    bx1 = x;
                    bx2 = x;
                    bx3 = x;
                    by1 -= 5;
                    by2 -= 5;
                    by3 -= 5;
                }
            }

            rectangle(bx1 - 2, by1 - 2, bx1 + 2, by1 + 2);
            rectangle(bx2 - 2, by2 - 2, bx2 + 2, by2 + 2);
            rectangle(bx3 - 2, by3 - 2, bx3 + 2, by3 + 2);
        }

        if (enemyY > 460)
            break;
    }

    getch();
    closegraph();

    printf("Score: %d\n", score);
    return 0;
}
